"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the
 * index of the `key` in the backing array.
 *
 * This is designed to allow synchronizing a second array with the contents of the backing array,
 * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,
 * and there are never duplicates.
 */
class SetArray {
    constructor() {
        this.array = string[];
        this._indexes = { __proto__: null };
        this.array = [];
    }
}
SetArray. = {
    get: exports.get = (strarr, key) => strarr._indexes[key],
    put: exports.put = (strarr, key) => {
        // The key may or may not be present. If it is present, it's a number.
        const index = exports.get(strarr, key);
        if (index !== undefined)
            return index;
        const { array, _indexes: indexes } = strarr;
        return (indexes[key] = array.push(key) - 1);
    },
    pop: exports.pop = (strarr) => {
        const { array, _indexes: indexes } = strarr;
        if (array.length === 0)
            return;
        const last = array.pop();
        indexes[last] = undefined;
    }
};
exports.SetArray = SetArray;
