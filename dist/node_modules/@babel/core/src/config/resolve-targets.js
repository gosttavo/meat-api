"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
Promise.resolve().then(function () { return require("./resolve-targets-browser"); });
Promise.resolve().then(function () { return require("./resolve-targets"); });
// Kind of gross, but essentially asserting that the exports of this module are the same as the
// exports of index-browser, since this file may be replaced at bundle time with index-browser.
({});
{
    ValidatedOptions;
}
from;
"./validation/options";
const path_1 = require("path");
const helper_compilation_targets_1 = require("@babel/helper-compilation-targets");
{
    Targets;
}
from;
"@babel/helper-compilation-targets";
function resolveBrowserslistConfigFile(browserslistConfigFile, configFileDir) {
    return path_1.default.resolve(configFileDir, browserslistConfigFile);
}
exports.resolveBrowserslistConfigFile = resolveBrowserslistConfigFile;
function resolveTargets(options, root) {
    const optTargets = options.targets;
    let targets;
    if (typeof optTargets === "string" || Array.isArray(optTargets)) {
        targets = { browsers: optTargets };
    }
    else if (optTargets) {
        if ("esmodules" in optTargets) {
            targets = Object.assign({}, optTargets, { esmodules: "intersect" });
        }
        else {
            // https://github.com/microsoft/TypeScript/issues/17002
            targets = optTargets;
        }
    }
    const { browserslistConfigFile } = options;
    let configFile;
    let ignoreBrowserslistConfig = false;
    if (typeof browserslistConfigFile === "string") {
        configFile = browserslistConfigFile;
    }
    else {
        ignoreBrowserslistConfig = browserslistConfigFile === false;
    }
    return helper_compilation_targets_1.default(targets, {
        ignoreBrowserslistConfig,
        configFile,
        configPath: root,
        browserslistEnv: options.browserslistEnv,
    });
}
exports.resolveTargets = resolveTargets;
